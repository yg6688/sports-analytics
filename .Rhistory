#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
players <- which(players1516$PLAYER %in% players1617$PLAYER)
players
players <- df[which(players1516$PLAYER %in% players1617$PLAYER),]
players <- players1516[which(players1516$PLAYER %in% players1617$PLAYER),]
View(players)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
players <- players1516[which(players1516$PLAYER %in% players1617$PLAYER),]
players <- players[which(players$PLAYER %in% players1718$PLAYER),]
players <- players[which(players$PLAYER %in% players1819$PLAYER),]
players$switches <- 0
View(players)
if (players$TEAM != players1617) {
players$switches = players$switches + 1
}
if (players$TEAM != players1617$TEAM) {
players$switches = players$switches + 1
}
players$switches <- ifelse(players$TEAM == players1617$TEAM, players$switches, players$switches + 1)
player <- merge(merge(merge(players1516, players1617, by = "PLAYER"), players1718, by = "PLAYER"), players1819, by = "PLAYER")
View(player)
names(player)
player <- merge(merge(merge(players1516, players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(players) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
players$switches <- 0
players$switches <- ifelse(players$TEAM1516 == players$TEAM1617, players$switches, players$switches + 1)
players$switches <- ifelse(players$TEAM1617 == players$TEAM1718, players$switches, players$switches + 1)
players$switches <- ifelse(players$TEAM1718 == players$TEAM1819, players$switches, players$switches + 1)
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(players) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
player$switches <- 0
player$switches <- ifelse(player$TEAM1516 == player$TEAM1617, player$switches, player$switches + 1)
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(player) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
player$switches <- 0
player$switches <- ifelse(player$TEAM1516 == player$TEAM1617, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1617 == player$TEAM1718, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1718 == player$TEAM1819, player$switches, player$switches + 1)
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
require(reshape)
player <- melt(player, id = c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819", "switches"))
install.packages("reshape")
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
require(reshape)
player <- melt(player, id = c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819", "switches"))
View(player)
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
require(reshape)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(player) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
player$switches <- 0
player$switches <- ifelse(player$TEAM1516 == player$TEAM1617, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1617 == player$TEAM1718, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1718 == player$TEAM1819, player$switches, player$switches + 1)
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
require(reshape)
player <- melt(player, id = c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819", "switches"))
View(player)
p <- ggplot(data = player, aes(y = value, x = variable, colour = switches))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
p <- ggplot(data = player, aes(y = value, x = variable, colour = switches))
p + scale_y_continuous(labels = comma) + ylab("Salary") +
xlab("Season") + ggtitle("Salary Plotted Against Number of Team Switches") +
scale_color_gradient(low="red", high="green") + geom_point()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(player) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
player$switches <- 0
player$switches <- ifelse(player$TEAM1516 == player$TEAM1617, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1617 == player$TEAM1718, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1718 == player$TEAM1819, player$switches, player$switches + 1)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(player) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
player$switches <- 0
player$switches <- ifelse(player$TEAM1516 == player$TEAM1617, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1617 == player$TEAM1718, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1718 == player$TEAM1819, player$switches, player$switches + 1)
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
require(reshape)
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
player2 <- player2$y1819 - player2$y1516
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
players1819 <- read.csv(file = "players18-19.csv", header = TRUE)
players1718 <- read.csv(file = "players17-18.csv", header = TRUE)
players1617 <- read.csv(file = "players16-17.csv", header = TRUE)
players1516 <- read.csv(file = "players15-16.csv", header = TRUE)
salary1819 <- read.csv(file = "18-19_salary.csv", header = TRUE)
salary1718 <- read.csv(file = "17-18_salary.csv", header = TRUE)
salary1617 <- read.csv(file = "16-17_salary.csv", header = TRUE)
salary1516 <- read.csv(file = "15-16_salary.csv", header = TRUE)
#merge concactenates two dataframes together by values in a certain row or column.
df_salary <- merge(salary1516, salary1617, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1718, by.x = "Player", by.y = "Player")
df_salary <- merge(df_salary, salary1819, by.x = "Player", by.y = "Player")
#rm removes dataframes and vectors from our local working environment.
#rm(salary1516, salary1617, salary1718, salary1819)
names(df_salary) <- c("Player", "y1516", "y1617", "y1718", "y1819")
df_salary$Player <- as.character(df_salary$Player)
df_salary$y1516 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1516)))
df_salary$y1617 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1617)))
df_salary$y1718 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1718)))
df_salary$y1819 = as.numeric(gsub("[\\$,]", "", as.character(df_salary$y1819)))
#Trim unnecessary whitespace to prevent string matching errors
df_salary$Player = trimws(df_salary$Player)
head(df_salary)
require(ggplot2)
require(scales)
data1819 <- merge(df_salary, players1819, by.x = "Player", by.y = "PLAYER")
p <- ggplot(data = data1819, aes(y = y1819, x = PTS, colour = MIN))
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point()
#lm stands for "linear model"
points_salary <- lm(y1819 ~ PTS, data = data1819)
summary(points_salary)
p + scale_y_continuous(labels = comma) + ylab("2018-2019 Salary") +
xlab("Points") + ggtitle("2018-2019 Season: Salary Plotted Against Points") +
scale_color_gradient(low="red", high="green") + geom_point() + geom_abline(intercept = 2174352, slope = 843156)
require(lpSolve)
# obj represents the objective function. This is the function that calculates the total cost of the team and is what we are trying to minimize.
obj <- data1819$y1819
#constr represents the constraint functions. These are the conditions that a valid solution must satisfy. The conditions we impose are that the "team" must have a minimum sum of 100 points per game, the team must have at least 12 players, and each player can only be chosen at most once.
constr <- matrix(append(append(data1819$PTS, rep(1, times = 256)), as.vector(diag(nrow = 256))), nrow = 258, byrow = TRUE)
#right represents the right hand side of the constraint functions.
right <- c(100, 12, rep(1, times = 256))
#constraints_direction represents the sign of the constraint functions.
constranints_direction  <- c(">=", ">=", rep("<=", times = 256))
optimum <-  lp(direction="min",
objective.in = obj,
const.mat = constr,
const.dir = constranints_direction,
const.rhs = right,
all.int = T)
best_sol <- optimum$solution
names(best_sol) <- data1819$Player
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
player <- merge(merge(merge(players1516[ , c("PLAYER", "TEAM")], players1617[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1718[ , c("PLAYER", "TEAM")], by = "PLAYER"), players1819[ , c("PLAYER", "TEAM")], by = "PLAYER")
names(player) <- c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819")
player$switches <- 0
player$switches <- ifelse(player$TEAM1516 == player$TEAM1617, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1617 == player$TEAM1718, player$switches, player$switches + 1)
player$switches <- ifelse(player$TEAM1718 == player$TEAM1819, player$switches, player$switches + 1)
player <- merge(player, df_salary, by.x = "PLAYER", by.y = "Player")
player2 <- player
player2$change <- player2$y1819 - player2$y1516
require(reshape)
player <- melt(player, id = c("PLAYER", "TEAM1516", "TEAM1617", "TEAM1718", "TEAM1819", "switches"))
p <- ggplot(data = player, aes(y = value, x = variable, colour = switches))
p + scale_y_continuous(labels = comma) + ylab("Salary") +
xlab("Season") + ggtitle("Salary Plotted Against Number of Team Switches") +
scale_color_gradient(low="red", high="green") + geom_point()
switch_lm <- lm(change ~ switches, data = player2)
summary(switch_lm)
View(player2)
